package com.hacker.test;

public class StringTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String str = "class Node\r\n"
				+ "4	{\r\n"
				+ "5	    int data;\r\n"
				+ "6	    Node left = null, right = null, next = null;\r\n"
				+ "7	\r\n"
				+ "8	    Node(int data) {\r\n"
				+ "9	        this.data = data;\r\n"
				+ "10	    }\r\n"
				+ "11	}\r\n"
				+ "12	public class Main\r\n"
				+ "13	{\r\n"
				+ "14	    public static void printList(Node head)\r\n"
				+ "15	    {\r\n"
				+ "16	        while (head != null) {\r\n"
				+ "17	            System.out.print(head.data + \" -> \");\r\n"
				+ "18	            head = head.next;\r\n"
				+ "19	        }\r\n"
				+ "20	\r\n"
				+ "21	        System.out.println(\"null\");\r\n"
				+ "22	    }\r\n"
				+ "23	    \r\n"
				+ "24	    public static void inorder(Node root)\r\n"
				+ "25	    {\r\n"
				+ "26	        if (root == null) {\r\n"
				+ "27	            return;\r\n"
				+ "28	        }\r\n"
				+ "29	\r\n"
				+ "30	        inorder(root.left);\r\n"
				+ "31	        System.out.print(root.data + \"->\");\r\n"
				+ "32	        if (root.next != null) {\r\n"
				+ "33	            System.out.println(root.next.data);\r\n"
				+ "34	        } else {\r\n"
				+ "35	            System.out.println(\"null\");\r\n"
				+ "36	        }\r\n"
				+ "37	        inorder(root.right);\r\n"
				+ "38	    }\r\n"
				+ "39	    public static Node findNextNode(Node root)\r\n"
				+ "40	    {\r\n"
				+ "41	        \r\n"
				+ "42	        if (root == null || root.next == null) {\r\n"
				+ "43	            return null;\r\n"
				+ "44	        }\r\n"
				+ "45	        \r\n"
				+ "46	        if (root.next.left != null) {\r\n"
				+ "47	            return root.next.left;\r\n"
				+ "48	        }\r\n"
				+ "49	        if (root.next.right != null) {\r\n"
				+ "50	            return root.next.right;\r\n"
				+ "51	        }\r\n"
				+ "52	        return findNextNode(root.next);\r\n"
				+ "53	    }\r\n"
				+ "54	    \r\n"
				+ "55	    public static void linkNodes(Node root)\r\n"
				+ "56	    {\r\n"
				+ "57	        if (root == null) {\r\n"
				+ "58	            return;\r\n"
				+ "59	        }\r\n"
				+ "60	        linkNodes(root.next);\r\n"
				+ "61	        if (root.left != null) {\r\n"
				+ "62	            root.left.next = (root.right != null)? root.right: findNextNode(root);\r\n"
				+ "63	        }\r\n"
				+ "64	        if (root.right != null) {\r\n"
				+ "65	            root.right.next = findNextNode(root);\r\n"
				+ "66	        }\r\n"
				+ "67	        linkNodes(root.left);\r\n"
				+ "68	        linkNodes(root.right);\r\n"
				+ "69	    }\r\n"
				+ "70	\r\n"
				+ "71	    public static void main(String[] args)\r\n"
				+ "72	    {\r\n"
				+ "73	\r\n"
				+ "74	        Node root = new Node(1);\r\n"
				+ "75	        root.left = new Node(2);\r\n"
				+ "76	        root.right = new Node(3);\r\n"
				+ "77	        root.left.left = new Node(4);\r\n"
				+ "78	        root.left.right = new Node(5);\r\n"
				+ "79	        root.right.right = new Node(6);\r\n"
				+ "80	        root.left.left.right = new Node(7);\r\n"
				+ "81	        root.right.right.left = new Node(8);\r\n"
				+ "82	        linkNodes(root);\r\n"
				+ "83	        Node node = root;\r\n"
				+ "84	        while (node != null)\r\n"
				+ "85	        {\r\n"
				+ "86	            \r\n"
				+ "87	            printList(node);\r\n"
				+ "88	            if (node.left != null)\r\n"
				+ "89	                node = node.left;\r\n"
				+ "90	            else if (node.right != null)\r\n"
				+ "91	                node = node.right;\r\n"
				+ "92	            else\r\n"
				+ "93	                node = findNextNode(node);\r\n"
				+ "94	        }\r\n"
				+ "95	\r\n"
				+ "96	        \r\n"
				+ "97	    }\r\n"
				+ "98	}";
		
		str  = str.replaceAll("[0123456789]","");
		
		System.out.println(str);

	}

}
